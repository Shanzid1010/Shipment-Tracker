from django.db import models
from django.contrib.auth.models import AbstractUser
from django.db.models import QuerySet

# ‡ßß. ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Æ‡¶°‡ßá‡¶≤ (Access Permission-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
class CustomUser(AbstractUser):
    ROLE_CHOICES = [
        ('admin', 'Admin'),
        ('editor', 'Can Edit'),
        ('viewer', 'View Only'),
    ]
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='viewer')

    def __str__(self):
        return f"{self.username} ({self.get_role_display()})"

# ‡ß®. ‡¶∂‡¶ø‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡¶°‡ßá‡¶≤
class Shipment(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending üïí'),
        ('fly', 'Fly ‚úÖ'),
        ('arrived', 'Arrived üì¶'),
    ]

    # ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡¶∏
    so_number = models.CharField(max_length=100, unique=True, verbose_name="S/O Number")
    lc_number = models.CharField(max_length=100, blank=True, null=True, verbose_name="LC Number")
    total_ctn = models.IntegerField(verbose_name="Total CTN")
    total_kg = models.FloatField(verbose_name="Total KG")
    
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name="Status")
    
    # ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá
    created_by = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True) 
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.so_number
    
    class Meta:
        ordering = ['-created_at'] # ‡¶®‡¶§‡ßÅ‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

    # --- ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü‡ßá ‡¶∏‡¶π‡¶ú‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ @property ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã ---
    # ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü‡ßá shipment.receipt_files ‡¶®‡¶æ‡¶Æ‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
    
    @property
    def receipt_files(self) -> QuerySet:
        # shipment.files ‡¶π‡¶≤‡ßã related_name, ‡¶Ø‡¶æ ShipmentFile-‡¶è‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡ßá‡ßü
        return self.files.filter(file_type='receipt')

    @property
    def packing_files(self) -> QuerySet:
        return self.files.filter(file_type='packing')

    @property
    def awb_files(self) -> QuerySet:
        return self.files.filter(file_type='awb')

# ‡ß©. ‡¶∂‡¶ø‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡¶°‡ßá‡¶≤
class ShipmentFile(models.Model):
    FILE_TYPE_CHOICES = [
        ('receipt', 'Receipt Copy'),
        ('packing', 'Packing List'),
        ('awb', 'AWB Copy'),
    ]
    # related_name='files' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá Shipment ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    shipment = models.ForeignKey(Shipment, related_name='files', on_delete=models.CASCADE) 
    file_type = models.CharField(max_length=20, choices=FILE_TYPE_CHOICES)
    uploaded_file = models.FileField(upload_to='shipment_files/') 

    def __str__(self):
        return f"{self.shipment.so_number} - {self.get_file_type_display()}"